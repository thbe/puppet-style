### /etc/profile.d/custom.sh
#
# custom shell stuff
#
# managed by Puppet, local changes will be overwritten
#

# Modify history settings
export HISTTIMEFORMAT="%d/%m/%y %T "
export HISTFILESIZE=5000
export HISTSIZE=5000

# Set git settings
export GIT_PS1_SHOWDIRTYSTATE=1

# Set standard editor
export EDITOR=/usr/bin/vim

# Set grep color
export GREP_OPTIONS='--color=auto'

# set colors
ROOT_COLOR=31  # red
USER_COLOR=32  # green

# Set hostname (fix unset full qualified hostnames)
if [ -z $(hostname -f 2> /dev/null) ]; then
  HOST_NAME=$(hostname)
else
  HOST_NAME=$(hostname -f)
fi

# Set prompt
export PS1_OLD=${PS1}
if [ $(id -u) -eq 0 ]; then
  PS1="\[\033[${ROOT_COLOR}m\]\u@${HOST_NAME}\[\033[34m\] \w\[\033[00m\]$ "
else
  PS1="\[\033[${USER_COLOR}m\]\u@${HOST_NAME}\[\033[34m\] \w\[\033[00m\]$ "
fi

# Function to execute command on all hosts returned by mco
distributedCommand() {
  for item in $( mco facts fqdn --json | sed -e 's/  */ /g' | cut -d ' ' -f2 | tail -n+3); do
    echo "${item}:"
    ssh -t ${item} "$@"
  done
}

# Small helpers
mcd() { mkdir -p "$1" && cd "$1"; }
zipf() { zip -r "$1".zip "$1" ; }
findPid() { lsof -t -c "$@" ; }
userPs() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }

# HTTP funcktions
httpHeaders() { /usr/bin/curl -I -L $@ ; }
httpDebug() { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }

# Generic extract command
extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# User specific aliases
if [ $(id -u) -eq 0 ]; then
  alias mv='mv -i -v'
  alias rm='rm -i -v'
  alias cp='cp -i -v'
else
  alias mv='mv -v'
  alias rm='rm -v'
  alias cp='cp -v'
  alias root='sudo su -'
  alias svim='sudo vim'
fi

# Command aliases
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'

alias ls='ls --color=auto -CF -h'
alias ll='ls -l'
alias la='ll -a'

alias facter='facter -p'
alias up='sudo puppet agent --test'
alias dstat-sum='dstat -cndymlp -N total -D total'
alias netstat-routing='netstat -rn'
alias netstat-listening='netstat -an | grep -E "tcp|udp"'
alias netstat-prog='sudo netstat -tulpn'

alias dush='du -sm * | sort -n | tail'
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'
alias numFiles='echo $(ls -1 | wc -l)'

alias make1mb='mkfile 1m ./1MB.dat'
alias make5mb='mkfile 5m ./5MB.dat'
alias make10mb='mkfile 10m ./10MB.dat'

alias memHogsTop='top -l 1 -o rsize | head -20'
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'
alias topForever='top -l 9999999 -s 10 -o cpu'
alias ttop="top -R -F -s 10 -o rsize"

alias myip='curl ip.appspot.com'
alias netCons='lsof -i'
alias lsock='sudo /usr/sbin/lsof -i -P'
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'
alias openPorts='sudo lsof -i | grep LISTEN'
alias ip1='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d "\" -f2'
alias ip2="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias excuse='echo `telnet bofh.jeffballard.us 666 2>/dev/null` |grep --color -o "Your excuse is:.*$"'
alias starwars='telnet towel.blinkenlights.nl'
alias ssh='ssh -X'

# Host information
ii() {
  echo -e "\nYou are logged on ${HOSTNAME}"
  echo -e "\nAdditionnal information:   " ; uname -a
  echo -e "\nUsers logged on:           " ; w -h
  echo -e "\nCurrent date:              " ; date
  echo -e "\nMachine stats:             " ; uptime
  echo -e "\nPublic facing IP Address:  " ; myip
  echo
}
